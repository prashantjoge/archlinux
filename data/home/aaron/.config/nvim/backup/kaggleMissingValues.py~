from sklearn.impute import SimpleImputer
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error
from sklearn.ensemble import RandomForestRegressor
import pandas as pd
import typing


# type pandas.DataFrame
melb_data = pd.read_csv(
    '~/projects/datasets/melb/MELBOURNE_HOUSE_PRICES_LESS.csv')
melb_data = melb_data.dropna()
melb_target = melb_data.Price
melb_predictors = melb_data.drop(['Price'], axis=1)  # type pd.DataFrame
# using numeric predictors

melb_numeric_predictors = melb_predictors.select_dtypes(exclude=['object'])
X_train, X_test, y_train, y_test = train_test_split(
    melb_numeric_predictors, melb_target, train_size=0.7, test_size=0.3, random_state=0)


def score_dataset(X_train, X_test, y_train, y_test):
    model = RandomForestRegressor()

    model.fit(X_train, y_train)
    preds = model.predict(X_test)
    return mean_absolute_error(y_test, preds)


cols_with_missing = [
    col for col in X_train.columns if X_train[col].isnull().any()]
reduced_X_train = X_train.drop(cols_with_missing, axis=1)
reduced_X_test = X_test.drop(cols_with_missing, axis=1)
# y_train = X_train.drop(cols_with_missing, axis=1)
# y_test = X_test.drop(cols_with_missing, axis=1)
print("Mean Absolute Error from dropping columns with Missing Values:")
print(score_dataset(reduced_X_train, reduced_X_test, y_train, y_test))

imputed_X_train_plus = X_train.copy()
imputed_X_test_plus = X_test.copy()
cols_with_missing = (
    col for col in X_train.columns if X_train[col].isnull().any())
for col in cols_with_missing:
    imputed_X_train_plus[col +
                         '_was_missing'] = imputed_X_train_plus[col].isnull()
    imputed_X_test_plus[col+'_was_missing'] = imputed_X_test_plus[col].isnull()
# Imputation
my_imputer = SimpleImputer()
imputed_X_train_plus = pd.DataFrame(
    my_imputer.fit_transform(imputed_X_train_plus))
imputed_X_test_plus.columns = X_train.columns
imputed_X_test_plus = my_imputer.transform(imputed_X_test_plus)

print("Mean Absolute Error from Imputation while Track What Was Imputed:")
print(score_dataset(imputed_X_train_plus, imputed_X_test_plus, y_train, y_test))
