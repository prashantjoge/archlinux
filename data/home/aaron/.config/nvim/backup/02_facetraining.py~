import cv2
import numpy as np
from PIL import Image
import os

# Path for face image database
path = 'dataset'

recognizer = cv2.face.LBPHFaceRecognizer_create()
detector = cv2.CascadeClassifier("haarcascade_frontalface_default.xml")

# function to get the images and label data
global faceSamples
global ids
faceSamples = []
ids = []


def getImagesAndLabels(path):

    imagePaths = [os.path.join(path, f) for f in os.listdir(path)]
    print(imagePaths)
    # global faceSamples = []
    # global ids = []

    for imagePath in imagePaths:
        print(imagePath)
        PIL_img = Image.open(imagePath).convert('L')  # convert it to grayscale
        img_numpy = np.array(PIL_img, 'uint8')

        id = os.path.split(imagePath)[1].split("/")[1]
        print(id)
        faces = detector.detectMultiScale(img_numpy)

        for (x, y, w, h) in faces:
            faceSamples.append(img_numpy[y:y+h, x:x+w])
            ids.append(id)

    # return faceSamples, ids


print("\n [INFO] Training faces. It will take a few seconds. Wait ...")

imagePaths = [os.path.join(path, f) for f in os.listdir(path)]
for imagepath in imagePaths:
    # faces, ids = getImagesAndLabels(imagepath)
    getImagesAndLabels(imagepath)

recognizer.train(faceSamples, np.array(ids))

# Save the model into trainer/trainer.yml
# recognizer.save() worked on Mac, but not on Pi
recognizer.write('trainer/trainer.yml')

# Print the numer of faces trained and end program
print("\n [INFO] {0} faces trained. Exiting Program".format(
    len(np.unique(ids))))
