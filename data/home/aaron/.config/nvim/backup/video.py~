import tkinter
import cv2
import PIL.Image, PIL.ImageTk
import time

class App:
   def __init__(self, window, window_title, video_source=0):
       self.window = window
       self.window.title(window_title)
       self.video_source = video_source
       # open video source (by default this will try to open the computer webcam)
       self.vid = MyVideoCapture(self.video_source)

       # Create a canvas that can fit the above video source size
       self.canvas = tkinter.Canvas(window, width = self.vid.width, height = self.vid.height)
       self.canvas.pack()
       # Button that lets the user take a snapshot
       self.btn_snapshot=tkinter.Button(window, text="Snapshot", width=50, command=self.snapshot)
       self.btn_snapshot.pack(anchor=tkinter.CENTER, expand=True)
       # After it is called once, the update method will be automatically called every delay milliseconds
       self.delay = 15
       self.update()
       self.window.mainloop()
   def snapshot(self):
       # Get a frame from the video source
       ret, frame = self.vid.get_frame()
       if ret:
           cv2.imwrite("frame-" + time.strftime("%d-%m-%Y-%H-%M-%S") + ".jpg", cv2.cvtColor(frame, cv2.COLOR_RGB2BGR))
   def update(self):
       # Get a frame from the video source
       ret, frame = self.vid.get_frame()
       if ret:
           self.photo = PIL.ImageTk.PhotoImage(image = PIL.Image.fromarray(frame))
           self.canvas.create_image(0, 0, image = self.photo, anchor = tkinter.NW)
           self.window.after(self.delay, self.update)

class MyVideoCapture:
   def __init__(self, video_source=0):
       # Open the video source
       self.vid = cv2.VideoCapture(video_source)
       if not self.vid.isOpened():
2             raise ValueError("Unable to open video source", video_source)
53
54         # Get video source width and height
55         self.width = self.vid.get(cv2.CAP_PROP_FRAME_WIDTH)
56         self.height = self.vid.get(cv2.CAP_PROP_FRAME_HEIGHT)
57
58     def get_frame(self):
59         if self.vid.isOpened():
60             ret, frame = self.vid.read()
61             if ret:
62                 # Return a boolean success flag and the current frame converted to BGR
63                 return (ret, cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))
64             else:
65                 return (ret, None)
66         else:
67             return (ret, None)
68
69     # Release the video source when the object is destroyed
70     def __del__(self):
71         if self.vid.isOpened():
72             self.vid.release()
73
74 # Create a window and pass it to the Application object
75 App(tkinter.Tk(), "Tkinter and OpenCV")
