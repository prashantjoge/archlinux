""" USAGE
python recognize_video.py --detector face_detection_model \
--embedding-model openface_nn4.small2.v1.t7 \
--recognizer output/recognizer.pickle \
--le output/le.pickle
"""
# import the necessary packages
from imutils.video import VideoStream
from imutils.video import FileVideoStream
from imutils.video import FPS
import numpy as np
import argparse
import imutils
import decimal
import pickle
import time

import cv2
import os
import sqlite3
from sqlite3 import Error
from datetime import datetime

def resize_image(image, width, height,COLOUR=[0,0,0]):
    h, w, layers = image.shape
    if h > height:
        ratio = height/h
        image = cv2.resize(image,(int(image.shape[1]*ratio),int(image.shape[0]*ratio)))
    h, w, layers = image.shape
    if w > width:
        ratio = width/w
        image = cv2.resize(image,(int(image.shape[1]*ratio),int(image.shape[0]*ratio)))
    h, w, layers = image.shape
    if h < height and w < width:
        hless = height/h
        wless = width/w
        if(hless < wless):
            image = cv2.resize(image, (int(image.shape[1] * hless), int(image.shape[0] * hless)))
        else:
            image = cv2.resize(image, (int(image.shape[1] * wless), int(image.shape[0] * wless)))
    h, w, layers = image.shape
    if h < height:
        df = height - h
        df /= 2
        image = cv2.copyMakeBorder(image, int(df), int(df), 0, 0, cv2.BORDER_CONSTANT, value=COLOUR)
    if w < width:
        df = width - w
        df /= 2
        image = cv2.copyMakeBorder(image, 0, 0, int(df), int(df), cv2.BORDER_CONSTANT, value=COLOUR)
    image = cv2.resize(image,(1280,720),interpolation=cv2.INTER_AREA)
    return image
conn = sqlite3.connect('database.db')
c = conn.cursor()
now = datetime.now()  # current date and time
insertsql = '''insert into users (name, logint, probability, confidence) values
(?, ?, ?, ?)'''
deletesql = '''delete from users '''
c.execute(deletesql)
conn.commit()
# construct the argument parser and parse the arguments
ap = argparse.ArgumentParser()
ap.add_argument("-d", "--detector", required=True,
                help="path to OpenCV's deep learning face detector")
ap.add_argument("-m", "--embedding-model", required=True,
                help="path to OpenCV's deep learning face embedding model")
ap.add_argument("-r", "--recognizer", required=True,
                help="path to model trained to recognize faces")
ap.add_argument("-l", "--le", required=True,
                help="path to label encoder")
ap.add_argument("-c", "--confidence", type=float, default=0.6,
                help="minimum probability to filter weak detections")
args = vars(ap.parse_args())

# load our serialized face detector from disk
print("[INFO] loading face detector...")
protoPath = os.path.sep.join([args["detector"], "deploy.prototxt"])
modelPath = os.path.sep.join([args["detector"],
                              "res10_300x300_ssd_iter_140000.caffemodel"])
detector = cv2.dnn.readNetFromCaffe(protoPath, modelPath)

# load our serialized face embedding model from disk
print("[INFO] loading face recognizer...")
embedder = cv2.dnn.readNetFromTorch(args["embedding_model"])

# load the actual face recognition model along with the label encoder
recognizer = pickle.loads(open(args["recognizer"], "rb").read())
le = pickle.loads(open(args["le"], "rb").read())

# initialize the video stream, then allow the camera sensor to warm up
print("[INFO] starting video stream...")
#vs = VideoStream(0).start()
vs =VideoStream('http://admin:admin@192.168.1.119/video.cgi').start()
#fs =FileVideoStream('http://admin:admin@192.168.1.119/video.cgi')
time.sleep(2.0)
#
#vs = cv2.VideoCapture()
#vs.open('http://admin:admin@192.168.1.119/video.cgi')
# start the FPS throughput estimator
fps = FPS().start()
unknown_counter = 0
# loop over frames from the video file stream
while True:
    # grab the frame from the threaded video stream
    frame = vs.read()
    """ resize the frame to have a width of 600 pixels (while
    maintaining the aspect ratio), and then grab the image	dimensions"""
    # height , width , layers =  frame.shape
    # h=height/2
    # w=width/2
    # print(h,w)
    # frame = cv2.resize(frame, (w, h))
    frame = imutils.resize(frame, width=600)
    # height , width , layers =  frame.shape
    (h, w) = frame.shape[:2]
    # (h,w) = (375,500)
    #h=400
    #w=500
    #frame=resize_image(frame,h,w)
    # frame= cv2.resize(frame,(h,w))
    # print(h,w)
    # construct a blob from the image
    imageBlob = cv2.dnn.blobFromImage(cv2.resize(
        frame, (400, 400)), 1.0, (400, 400),
        (104.0, 177.0, 123.0), swapRB=False, crop=False)
    # apply OpenCV's deep learning-based face detector to localize faces in the input image
    detector.setInput(imageBlob)
    detections = detector.forward()

    # loop over the detections
    for i in range(0, detections.shape[2]):
        # extract the confidence (i.e., probability) associated with
        # the prediction
        confidence = detections[0, 0, i, 2]
        print(confidence)
        # filter out weak detections
        if confidence > args["confidence"]:
            # compute the (x, y)-coordinates of the bounding box for
            # the face
            box = detections[0, 0, i, 3:7] * np.array([w, h, w, h])
            (startX, startY, endX, endY) = box.astype("int")
            # extract the face ROI
            face = frame[startY:endY, startX:endX]
            img = frame[startY-20:endY+20, startX-20:endX+20]
            (fH, fW) = face.shape[:2]
            # ensure the face width and height are sufficiently large
            if fW < 20 or fH < 20:
                continue
            # construct a blob for the face ROI, then pass the blob
            # through our face embedding model to obtain the 128-d
            # quantification of the face
            faceBlob = cv2.dnn.blobFromImage(
                face, 1.0 / 255, (96, 96), (0, 0, 0), swapRB=True, crop=False)
            embedder.setInput(faceBlob)
            vec = embedder.forward()
            # perform classification to recognize the face
            preds = recognizer.predict_proba(vec)[0]
            j = np.argmax(preds)
            # print("confidence",confidence)
            # print("classitfications",preds)
            # print("prediction",j)
            proba = preds[j]
            # print("probability",proba)
            name = le.classes_[j]

            # print(le.classes_)
            logint = datetime.now()
            logint = logint.strftime('%Y-%m-%d %H:%M:%S')
            # print(logint)
            # draw the bounding box of the face along with the
            # associated probability
            text = "{}: {:.2f}%".format(name, proba * 100)
            y = startY - 10 if startY - 10 > 10 else startY + 10

            recordTuple = (name, logint, text, str(confidence))
            print(name)
            if name != "unknown":
                cv2.rectangle(frame, (startX, startY),(endX, endY), (0, 255, 0), 2)
                cv2.putText(frame, text, (startX, y),cv2.FONT_HERSHEY_SIMPLEX,
                        0.45, (0, 255, 0), 2)
                # logint = now.strftime('%Y-%m-%d %H:%M:%S')
                # print(now.strftime('%Y-%m-%d %H:%M:%S'))
                # print(logint)
                # print(name)

            if name == "unknown":

                cv2.rectangle(frame, (startX-50, startY-50),(endX+50, endY+50), (0, 0, 255), 2)
                #cv2.putText(frame, text, (startX, y),cv2.FONT_HERSHEY_SIMPLEX, 0.45, (0, 0, 255), 2)
                unknowns_name = "unknown" + str(unknown_counter) + ".png"
                # (new_top, new_right, new_bottom, new_left) = (int(startX),int(startY), int(endX), int(endY))
                # print(new_top,new_left,new_right,new_bottom)
                cv2.imwrite(unknowns_name,img,[cv2.IMWRITE_PNG_COMPRESSION, 3])
                unknown_counter += 1


            try:
                # print(insertsql)
                # print(recordTuple)
                result = c.execute(insertsql, recordTuple)
                conn.commit()
                # print("record inserted")
            except Error as e:
                print(e)
            # c.execute('INSERT INTO users(name, logint) values (?, ?)', (name, now.strftime("%m/%d/%y, %H:%M:%S")))
    # update the FPS counter
    fps.update()
    # show the output frame
    cv2.imshow("Frame", frame)
    key = cv2.waitKey(1) & 0xFF
    # if the `q` key was pressed, break from the loop
    if key == ord("q"):
        break

# stop the timer and display FPS information
fps.stop()
# conn.commit()
conn.close()
print("[INFO] elasped time: {:.2f}".format(fps.elapsed()))
print("[INFO] approx. FPS: {:.2f}".format(fps.fps()))

# do a bit of cleanup
cv2.destroyAllWindows()
vs.stop()

