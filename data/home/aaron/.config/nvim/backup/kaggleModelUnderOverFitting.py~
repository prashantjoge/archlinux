import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error
from sklearn.tree import DecisionTreeRegressor


def get_mae(max_leaf_nodes, train_X, val_X, train_y, val_y):
    model = DecisionTreeRegressor(
        max_leaf_nodes=max_leaf_nodes, random_state=0)
    model.fit(train_X, train_y)
    preds_val = model.predict(val_X)
    mae = mean_absolute_error(val_y, preds_val)
    return mae


melb_file_path = '~/projects/datasets/melb/Melbourne_housing_FULL.csv'
melb_data = pd.read_csv(melb_file_path)
filtered_melb_data = melb_data.dropna(axis=0)
y = filtered_melb_data.Price
melbourne_features = ['Rooms', 'Bathroom', 'Landsize', 'BuildingArea',
                      'YearBuilt', 'Lattitude', 'Longtitude']
X = filtered_melb_data[melbourne_features]
train_X, val_X, train_y, val_y = train_test_split(X, y, random_state=0)
for max_leaf_nodes in [5, 50, 500, 5000, 10000]:
    my_mae = get_mae(max_leaf_nodes, train_X, val_X, train_y, val_y)
    print("Max leaf nodes: %d     \t\t Mean Absolute Error: %d" %
          (max_leaf_nodes, my_mae))
candidate_max_leaf_nodes = [5, 25, 50, 100, 250, 500, 1000, 5000]
scores = {leaf_size: get_mae(leaf_size, train_X, val_X, train_y, val_y)
          for leaf_size in candidate_max_leaf_nodes}
print(min(scores, key=scores.get))
